stages:
  - versioning
  - prepare
  - test
  - build

versioning:
  image: alpine:latest
  stage: versioning
  only:
    - branches
  before_script:
    - apk add git
  script:
    - export VERSION=$(git tag)
    - echo $VERSION
    - echo $VERSION > version
  artifacts:
    paths:
      - version

build_docker:
  image: docker:latest
  stage: prepare
  services:
    - docker:dind
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - cp mobile/.env-sample mobile/.env
    - while read a ; do echo ${a//%GOOGLE_MAPS_ANDROID_API_KEY%/$GOOGLE_MAPS_ANDROID_API_KEY} ; done < mobile/.env > mobile/.env.t ; mv mobile/.env.t mobile/.env
    - cat mobile/.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --no-cache py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
    - pip install docker-compose
  script:
    - cd mobile
    - COMPOSE_HTTP_TIMEOUT=500 docker-compose build --no-cache
    - docker images
    - docker-compose push

lint:
  image: docker:latest
  stage: test
  only:
    changes:
      - '**/*.ts'
  services:
    - docker:dind
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - cp mobile/.env-sample mobile/.env
    - while read a ; do echo ${a//%GOOGLE_MAPS_ANDROID_API_KEY%/$GOOGLE_MAPS_ANDROID_API_KEY} ; done < mobile/.env > mobile/.env.t ; mv mobile/.env.t mobile/.env
    - cat mobile/.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --no-cache py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
    - pip install docker-compose
  script:
    - cd mobile
    - docker-compose pull
    - docker images
    - COMPOSE_HTTP_TIMEOUT=500 docker-compose up -d
    - docker-compose exec -T app npm run lint

build_apk:
  image: docker:latest
  stage: build
  only:
    - branches
  services:
    - docker:dind
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - cp mobile/.env-sample mobile/.env
    - while read a ; do echo ${a//%GOOGLE_MAPS_ANDROID_API_KEY%/$GOOGLE_MAPS_ANDROID_API_KEY} ; done < mobile/.env > mobile/.env.t ; mv mobile/.env.t mobile/.env
    - cat mobile/.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --no-cache py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
    - pip install docker-compose
  script:
    - cd mobile
    - docker-compose pull
    - docker images
    - COMPOSE_HTTP_TIMEOUT=500 docker-compose up -d
    - docker-compose exec -T app ionic cordova platform add android
    - docker-compose exec -T app sed -i -e "s/%VERSION%/${VERSION}-${CI_PIPELINE_IID}/g" config.xml
    - docker-compose exec -T app sed -i -e "s/com.google.firebase:firebase-core:10.+/com.google.firebase:firebase-core:12.0.1/g" platforms/android/project.properties
    - docker-compose exec -T app sed -i -e "s/com.google.firebase:firebase-messaging:10.+/com.google.firebase:firebase-messaging:12.0.1/g" platforms/android/project.properties
    - docker-compose exec -T app sed -i -e "s/com.google.android.gms:play-services-maps:15.0.1/com.google.android.gms:play-services-maps:12.0.1/g" platforms/android/project.properties
    - docker-compose exec -T app sed -i -e "s/com.google.android.gms:play-services-location:15.0.1/com.google.android.gms:play-services-location:12.0.1/g" platforms/android/project.properties
    - docker-compose exec -T app sed -i -e "s/com.google.firebase:firebase-core:10.+/com.google.firebase:firebase-core:12.0.1/g" platforms/android/cordova-plugin-fcm-with-dependecy-updated/jds-FCMPlugin.gradle
    - docker-compose exec -T app echo "${FIREBASE_STAGING}" > platforms/android/google-services.json
    - docker-compose exec -T app echo "${FIREBASE_STAGING}" > platforms/android/app/google-services.json
    - docker-compose exec -T app npm run build:android:prod-staging
    - ls -l platforms/android/app/build/outputs/apk/debug/
    - if ! [[ -e platforms/android/app/build/outputs/apk/debug/app-debug.apk ]]; then exit 1; fi
    - docker-compose exec -T app echo "${FIREBASE_PRODUCTION}" > platforms/android/google-services.json
    - docker-compose exec -T app echo "${FIREBASE_PRODUCTION}" > platforms/android/app/google-services.json
    - docker-compose exec -T app npm run build:android:prod-release
    - if ! [[ -e platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk ]]; then exit 1; fi
    - wget $KEYSTORE_URL
    - if ! [[ -e $KEYSTORE_FILENAME ]]; then exit 1; fi
    - docker-compose exec -T app jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore $KEYSTORE_FILENAME -storepass $KEYSTORE_PASSPHRASE platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk SapaWarga
    - docker-compose exec -T app zipalign -v 4 platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk app-release-signed-${CI_PIPELINE_IID}.apk
    - docker-compose exec -T app ls -al
    - docker-compose exec -T app ls -al platforms/android/app/build/outputs/apk/release/
    - docker-compose exec -T app apksigner verify app-release-signed-${CI_PIPELINE_IID}.apk
    - ls -al platforms/android/app/build/outputs/apk/release/
  artifacts:
    paths:
      - mobile/platforms/android/app/build/outputs/apk/debug/app-debug.apk
      - mobile/app-release-signed-${CI_PIPELINE_IID}.apk
